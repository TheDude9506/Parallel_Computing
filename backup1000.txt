#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

void swap(int local_data[], int i, int j, int dir) {
    if (dir == (local_data[i] > local_data[j])) {
        int temp = local_data[i];
        local_data[i] = local_data[j];
        local_data[j] = temp;
    }
}

void bitonic_merge(int local_data[], int low, int local_n, int dir) {
    if (local_n > 1) {
        int mid = local_n / 2;
        for (int i = low; i < low + mid; i++) {
            swap(local_data, i, i + mid, dir);
        }
        bitonic_merge(local_data, low, mid, dir);
        bitonic_merge(local_data, low + mid, mid, dir);
    }
}

void bitonic_sort(int local_data[], int low, int local_n, int dir) {
    if (local_n > 1) {
        int mid = local_n / 2;
        bitonic_sort(local_data, low, mid, 1);
        bitonic_sort(local_data, low + mid, mid, 0);
        bitonic_merge(local_data, low, mid, dir);
    }
}

void sort(int local_data[], int local_n, int dir) {
    bitonic_sort(local_data, 0, local_n, dir);
}

int main(int argc, char* argv[]) {
    int rank, size, n, local_n;
    int* data = NULL;
    int* local_data = NULL;
    int dir = 1;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        if (argc != 2) {
            fprintf(stderr, "Usage: %s <number_of_elements>\n", argv[0]);
            MPI_Abort(MPI_COMM_WORLD, 1);
        }

        n = atoi(argv[1]);
        if (n % size != 0) {
            fprintf(stderr, "Number of elements must be divisible by the number of processes\n");
            MPI_Abort(MPI_COMM_WORLD, 1);
        }

        data = (int*)malloc(n * sizeof(int));
        for (int i = 0; i < n; i++) {
            data[i] = rand() % 100;
        }

        printf("Unsorted array:\n");
        for (int i = 0; i < n; i++) {
            printf("%d ", data[i]);
        }
        printf("\n");
    }

    MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);

    local_n = n / size;
    local_data = (int*)malloc(local_n * sizeof(int));

    MPI_Scatter(data, local_n, MPI_INT, local_data, local_n, MPI_INT, 0, MPI_COMM_WORLD);

    sort(local_data, local_n, dir);


    MPI_Gather(local_data, local_n, MPI_INT, data, local_n, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Sorted array:\n");
        for (int i = 0; i < n; i++) {
            printf("%d ", data[i]);
        }
        printf("\n");

        free(data);
    }

    free(local_data);
    MPI_Finalize();
    return 0;
}