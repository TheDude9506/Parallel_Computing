#include <stdio.h>
#include <time.h>
#include <math.h>
#include <stdlib.h>
#include <mpi.h>

#define MASTER 0
int comp_func(const void* a, const void* b);
void compare_low(int j);
void compare_high(int j);

double time_start, time_stop;
int process_rank, num_processes;
int* array;
int array_size;

int main(int argc, char* argv[]) {
	int i, j;


	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &num_processes);
	MPI_Comm_rank(MPI_COMM_WORLD, &process_rank);

	array_size = atoi(argv[1]) / num_processes;
	array = (int*)malloc(array_size * sizeof(int));
	srand(time(NULL));
	for (i = 0; i < array_size; i++) {
		array[i] = rand() % (atoi(argv[1]));
	}
	printf("why the hell\n");
	
	MPI_Barrier(MPI_COMM_WORLD);
	int dim = (int)(log2(num_processes));

	//printf("\nprocess_rank = %d\n", process_rank);
	if (process_rank == MASTER) {
		printf("frist 20 unsorted values: \n");
		for (i = 0; i < 20; i++) {
			printf("%d ", array[i]);
		}
		printf("\nnumber of processes: %d\n", num_processes);
		time_start = MPI_Wtime();
	}

	qsort(array, array_size, sizeof(int), comp_func);

	for (i = 0; i < dim; i++) {
		for (j = i; j >= 0; j--) {
			if (((process_rank >> (i + 1)) % 2 == 0 &&
				(process_rank >> j) % 2 == 0) ||
				((process_rank >> (i + 1)) % 2 != 0 &&
				(process_rank >> j) % 2 != 0)) {
				compare_low(j);
			}
			else {
				compare_high(j);
			}
		}
	}

	MPI_Barrier(MPI_COMM_WORLD);

	if (process_rank == MASTER) {
		time_stop = MPI_Wtime();
		printf("first 20 sorted values: \n");
		for (i = 0; i < 40; i++) {
			printf("%d ", array[i]);
		}

		printf("calc time: %f\n", time_stop - time_start);
	}

	free(array);
	MPI_Finalize();
	return 0;
}

int comp_func(const void* a, const void* b) {
	return(*(int*)a - *(int*)b);
}

void compare_low(int j) {
	int i, min;
	int send_count = 0;
	int* send_buffer = malloc((array_size + 1) * sizeof(int));

	MPI_Send(&array[array_size - 1], 1, MPI_INT,
		process_rank ^ (1 << j), 0, MPI_COMM_WORLD);

	int recv_count = 0;
	int* recv_buffer = malloc((array_size + 1) * sizeof(int));

	MPI_Recv(&min, 1, MPI_INT, process_rank ^ (1 << j),
		0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

	for (i = 0; i < array_size; i++) {
		if (array[i] > min) {
			send_buffer[send_count + 1] = array[i];
			send_count++;
		}
		else {
			break;
		}
	}

	send_buffer[0] = send_count;

	MPI_Send(send_buffer, send_count, MPI_INT,
		process_rank ^ (1 << j), 0, MPI_COMM_WORLD);

	MPI_Recv(recv_buffer, array_size, MPI_INT,
		process_rank ^ (1 << j), 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

	for (i = 1; i < recv_buffer[0] + 1; i++) {
		if (array[array_size - 1] < recv_buffer[i]) {
			array[array_size - 1] = recv_buffer[i];
		}
		else {
			break;
		}
	}

	qsort(array, array_size, sizeof(int), comp_func);

	free(send_buffer);
	free(recv_buffer);
}

void compare_high(int j) {
	int i, max;
	int recv_count;
	int* recv_buffer = malloc((array_size + 1) * sizeof(int));
	MPI_Recv(&max, 1, MPI_INT, process_rank ^ (1 << j),
		0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

	int send_count = 0;
	int* send_buffer = malloc((array_size + 1) * sizeof(int));
	MPI_Send(&array[0], 1, MPI_INT, process_rank ^ (1 << j),
		0, MPI_COMM_WORLD);

	for (i = 0; i < array_size; i++) {
		if (array[i] < max) {
			send_buffer[send_count + 1] = array[i];
			send_count++;
		}
		else {
			break;
		}
	}

	MPI_Recv(recv_buffer, array_size, MPI_INT,
		process_rank ^ (1 << j), 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

	recv_count = recv_buffer[0];
	send_buffer[0] = send_count;

	MPI_Send(send_buffer, send_count, MPI_INT, process_rank ^ (1 << j),
		0, MPI_COMM_WORLD);

	for (i = 1; i < recv_count; i++) {
		if (recv_buffer[i] > array[0]) {
			array[0] = recv_buffer[i];
		}
		else {
			break;
		}
	}

	qsort(array, array_size, sizeof(int), comp_func);

	free(send_buffer);
	free(recv_buffer);
}















#include <stdio.h>
#include <time.h>
#include <math.h>
#include <stdlib.h>
#include <mpi.h>

#define MASTER 0
int comp_func(const void* a, const void* b);
void compare_low(int j);
void compare_high(int j);

double time_start, time_stop;
int process_rank, num_processes;
int* array;
int array_size;
int* all_array;
int all_array_size;

int main(int argc, char* argv[]) {
	int i, j;

	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &num_processes);
	MPI_Comm_rank(MPI_COMM_WORLD, &process_rank);

	array_size = atoi(argv[1]) / num_processes;
	array = (int*)malloc(array_size * sizeof(int));
	all_array_size = atoi(argv[1]);
	srand(time(NULL));
	for (i = 0; i < array_size; i++) {
		array[i] = rand() % (atoi(argv[1]));
	}
	printf("why the hell\n");

	MPI_Barrier(MPI_COMM_WORLD);
	int dim = (int)(log2(num_processes));

	//printf("\nprocess_rank = %d\n", process_rank);
	if (process_rank == MASTER) {
		printf("frist 20 unsorted values: \n");
		for (i = 0; i < 20; i++) {
			printf("%d ", array[i]);
		}
		printf("\nnumber of processes: %d\n", num_processes);
		time_start = MPI_Wtime();
	}

	qsort(array, array_size, sizeof(int), comp_func);

	for (i = 0; i < dim; i++) {
		for (j = i; j >= 0; j--) {
			if (((process_rank >> (i + 1)) % 2 == 0 &&
				(process_rank >> j) % 2 == 0) ||
				((process_rank >> (i + 1)) % 2 != 0 &&
					(process_rank >> j) % 2 != 0)) {
				compare_low(j);
			}
			else {
				compare_high(j);
			}
		}
	}
	MPI_Barrier(MPI_COMM_WORLD);

	if (process_rank == MASTER) {
		time_stop = MPI_Wtime();
		printf("first 20 sorted values: \n");
		for (i = 0; i < 64; i++) {
			printf("%d ", all_array[i]);
		}

		printf("calc time: %f\n", time_stop - time_start);
	}

	printf("for the fuck sake:\n");
	for (i = 0; i < all_array_size; i++) {
		printf("%d ", all_array[i]);
	}
	free(array);
	MPI_Finalize();
	return 0;
}



int comp_func(const void* a, const void* b) {
	return(*(int*)a - *(int*)b);
}

void compare_low(int j) {
	int i, min;
	int send_count = 0;
	int* send_buffer = malloc((array_size + 1) * sizeof(int));

	MPI_Send(&array[array_size - 1], 1, MPI_INT,
		process_rank ^ (1 << j), 0, MPI_COMM_WORLD);

	int recv_count = 0;
	int* recv_buffer = malloc((array_size + 1) * sizeof(int));

	MPI_Recv(&min, 1, MPI_INT, process_rank ^ (1 << j),
		0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

	for (i = 0; i < array_size; i++) {
		if (array[i] > min) {
			send_buffer[send_count + 1] = array[i];
			send_count++;
		}
		else {
			break;
		}
	}

	send_buffer[0] = send_count;

	MPI_Send(send_buffer, send_count, MPI_INT,
		process_rank ^ (1 << j), 0, MPI_COMM_WORLD);

	MPI_Recv(recv_buffer, array_size, MPI_INT,
		process_rank ^ (1 << j), 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

	for (i = 1; i < recv_buffer[0] + 1; i++) {
		if (array[array_size - 1] < recv_buffer[i]) {
			array[array_size - 1] = recv_buffer[i];
		}
		else {
			break;
		}
	}

	qsort(array, array_size, sizeof(int), comp_func);

	free(send_buffer);
	free(recv_buffer);
}

void compare_high(int j) {
	int i, max;
	int recv_count;
	int* recv_buffer = malloc((array_size + 1) * sizeof(int));
	MPI_Recv(&max, 1, MPI_INT, process_rank ^ (1 << j),
		0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

	int send_count = 0;
	int* send_buffer = malloc((array_size + 1) * sizeof(int));
	MPI_Send(&array[0], 1, MPI_INT, process_rank ^ (1 << j),
		0, MPI_COMM_WORLD);

	for (i = 0; i < array_size; i++) {
		if (array[i] < max) {
			send_buffer[send_count + 1] = array[i];
			send_count++;
		}
		else {
			break;
		}
	}

	MPI_Recv(recv_buffer, array_size, MPI_INT,
		process_rank ^ (1 << j), 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

	recv_count = recv_buffer[0];
	send_buffer[0] = send_count;

	MPI_Send(send_buffer, send_count, MPI_INT, process_rank ^ (1 << j),
		0, MPI_COMM_WORLD);

	for (i = 1; i < recv_count; i++) {
		if (recv_buffer[i] > array[0]) {
			array[0] = recv_buffer[i];
		}
		else {
			break;
		}
	}

	qsort(array, array_size, sizeof(int), comp_func);

	free(send_buffer);
	free(recv_buffer);
}



